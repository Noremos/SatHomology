#include "gtest/gtest.h"
#include <initializer_list>
#include <ostream>
#include <vector>
#include "../backend/Algs/Gen2/Trainer.h"

constexpr bool DEBUGY = false;
TEST(TrainerTest, FindCloser)
{
	Trainer<4> train;

	Trainer<4>::Hash h;
	// 0
	h.value = 0.5;
	h.key[0] = 0.1;
	h.key[1] = 0.2;
	h.key[2] = 0.2;
	h.key[3] = 0.5;
	train.add(h);

	// 1
	h.value = 0.8;
	h.key[0] = 0.1;
	h.key[1] = 0.1;
	h.key[2] = 0.1;
	h.key[3] = 0.1;
	train.add(h);

	// 2
	h.value = 0.8;
	h.key[0] = 0.1;
	h.key[1] = 0.8;
	h.key[2] = 0.8;
	h.key[3] = 0.1;
	train.add(h);

	// 3
	h.value = 0.8;
	h.key[0] = 0.5;
	h.key[1] = 0.5;
	h.key[2] = 0.5;
	h.key[3] = 0.1;
	train.add(h);

	train.train();
	int id;

	h.key[0] = 0.0;
	h.key[1] = 0.1;
	h.key[2] = 0.1;
	h.key[3] = 0.0;
	id = train.getCloser(h);
	ASSERT_EQ(id, 1);

	h.key[0] = 0.9;
	h.key[1] = 0.8;
	h.key[2] = 0.9;
	h.key[3] = 1.0;
	id = train.getCloser(h);
	ASSERT_EQ(id, 2);

	h.key[0] = 0.6;
	h.key[1] = 0.6;
	h.key[2] = 0.6;
	h.key[3] = 0.2;
	id = train.getCloser(h);
	ASSERT_EQ(id, 3);
}


class TrainerTese : public Trainer<8>
{
public:
	TrainerTese(bool debugDraw) : Trainer<8>(debugDraw)
	{ }

	std::vector<HashK<8>> testLines;
	void addTest(std::initializer_list<float> vals)
	{
		HashK<8> h(vals);
		this->add(h);
		testLines.push_back(h);
	}

	int findRealCloser(const HashK<8>& ue)
	{
		float minDiff = 9999999;
		int minId = 0;
		for (int i = 0; i < testLines.size(); i++)
		{
			float sumDiff = 0;
			auto& line = this->testLines[i];
			for (int j = 0; j < 8; j++)
			{
				float a = line.key[j] - ue.key[j];
				sumDiff += a * a;
			}

			sumDiff = sqrt(sumDiff);
			if (sumDiff < minDiff)
			{
				minDiff = sumDiff;
				minId = i;
			}
		}

		if (debugDraw)
			std::cout << "Min diff is " << minDiff << std::endl;

		return minId;
	}
};

void add(TrainerTese& train, std::initializer_list<float> vals)
{
	train.addTest(vals);
}

void get(TrainerTese& train, std::initializer_list<float> vals, int id)
{
	const HashK<8> h(vals);
	int getFromCloser = train.getCloser(h);
	// int foundId = train.findRealCloser(h);

	// ASSERT_EQ(foundId, optFind);
	ASSERT_EQ(id, getFromCloser);
}

TEST(TrainerTest, FindCloser2)
{
	TrainerTese train(DEBUGY);

	add(train, {0,0.520325, 1, 1, 1, 1, 1, 0}); // 0
	add(train, {0, 0.520325, 0.520325, 0.520325, 0, 0, 0.520325, 0.520325}); // 1
	add(train, {0, 0.520325, 0, 1, 1, 1, 0.520325, 0.520325}); // 2
	add(train, {1, 1, 1, 1, 0.520325, 0, 0.520325, 1}); // 3
	add(train, {0.520325, 1, 1, 1, 0, 0, 0, 0.520325}); // 4
	add(train, {1, 1, 0.520325, 0.520325, 0, 0.520325, 0.520325, 1}); // 5
	add(train, {1, 1, 0.520325, 0, 0.520325, 1, 1, 1}); // 6
	add(train, {0.520325, 0.520325, 0, 0, 0.520325, 1, 1, 1}); // 7
	add(train, {0.520325, 0, 0, 1, 1, 1, 1, 1}); // 8
	add(train, {0, 0, 0, 0, 1, 0.520325, 1, 0}); // 9
	add(train, {1, 0, 0, 0, 1, 0.520325, 0.520325, 0}); // 10
	add(train, {1, 0, 0, 0, 1, 0, 0,.520325}); // 11
	add(train, {1, 0, 0, 0, 1, 1, 0, 0.520325}); // 12
	add(train, {1, 0, 0, 0, 0, 0, 1, 0}); // 13
	add(train, {0, 0, 1, 1, 0.520325, 0.520325, 1, 0}); // 14
	add(train, {0, 1, 1, 0, 0, 0, 1, 0}); // 15
	add(train, {0, 0, 1, 0.520325, 0.520325, 0.520325, 1, 0}); // 16
	add(train, {0, 0, 1, 0, 0, 0, 1, 0.520325}); // 17
	add(train, {0, 0, 1, 0.520325, 0.520325, 1, 1, 0}); // 18
	add(train, {0.520325, 0, 1, 0, 0, 0, 1, 1}); // 19
	add(train, {0, 0, 1, 0.520325, 1, 0, 0, 0}); // 20
	add(train, {1, 1, 0.520325, 0.520325, 1, 0, 0, 0}); // 21
	add(train, {1, 0.520325, 0.520325, 0.520325, 1, 0, 0, 0}); // 22
	add(train, {1, 0.520325, 0.520325, 1, 1, 0, 0, 0}); // 23
	add(train, {1, 0.520325, 1, 0, 0, 0, 0, 0}); // 24
	// add(train, {0, 0, 0, 0, 1, 1, 0.6, 0}); // 25

	// get(train, {0, 0, 0, 0, 0.915217, 0.5, 0.704789, 0}, 10);
	get(train, {0.614422, 0, 0, 1, 0.798862, 0.779357, 0.926643, 0.704789}, 8);
	// get(train, {0.614422, 0, 0, 0, 0.798862, 0.779357, 0.926643, 0.704789}, 12);
	// get(train, {0.915217, 0, 0, 0, 0.928, 0.561712, 0.779357, 0.926643}, 13);
	// get(train, {0.798862, 0, 0, 0, 0.638018, 0.55119, 0.561712, 0.779357}, 13);
	// get(train, {0.928, 0, 0, 0, 0, 0, 0.55119, 0.561712}, 13);
	// get(train, {0, 0, 0.614422, 0.915217, 0.926643, 0.163909, 0.375801, 0}, 18);
	// get(train, {0.704789, 0.614422, 0.915217, 0.798862, 0.779357, 0.658033, 0.163909, 0.375801}, 1);
	// get(train, {0.926643, 0.915217, 0.798862, 0.928, 0.561712, 0.620215, 0.658033, 0.163909}, 1);
	// get(train, {0.779357, 0.798862, 0.928, 0.638018, 0.55119, 0.670754, 0.620215, 0.658033}, 1);
	// get(train, {0.561712, 0.928, 0.638018, 0, 0, 0, 0.670754, 0.620215}, 1);
	// get(train, {0, 0, 0.704789, 0.926643, 0.163909, 0.22146, 0.177305, 0}, 18);
	// get(train, {0.375801, 0.704789, 0.926643, 0.779357, 0.658033, 0.392301, 0.22146, 0.177305}, 1);
	// get(train, {0.163909, 0.926643, 0.779357, 0.561712, 0.620215, 0.774627, 0.392301, 0.22146}, 1);
	// get(train, {0.658033, 0.779357, 0.561712, 0.55119, 0.670754, 0.371737, 0.774627, 0.392301}, 1);
	// get(train, {0.620215, 0.561712, 0.55119, 0, 0, 0, 0.371737, 0.774627}, 1);
	// get(train, {0, 0, 0.375801, 0.163909, 0.22146, 0.1118, 0.773841, 0}, 18);
	// get(train, {0.177305, 0.375801, 0.163909, 0.658033, 0.392301, 0.69449, 0.1118, 0.773841}, 18);
	// get(train, {0.22146, 0.163909, 0.658033, 0.620215, 0.774627, 0.231703, 0.69449, 0.1118}, 18);
	// get(train, {0.392301, 0.658033, 0.620215, 0.670754, 0.371737, 0.518411, 0.231703, 0.69449}, 3);
	// get(train, {0.774627, 0.620215, 0.670754, 0, 0, 0, 0.518411, 0.231703}, 1);
	// get(train, {0, 0, 0.177305, 0.22146, 0.1118, 0, 0, 0}, 18);
	// get(train, {0.773841, 0.177305, 0.22146, 0.392301, 0.69449, 0, 0, 0}, 18);
	// get(train, {0.1118, 0.22146, 0.392301, 0.774627, 0.231703, 0, 0, 0}, 18);
	// get(train, {0.69449, 0.392301, 0.774627, 0.371737, 0.518411, 0, 0, 0}, 18);
	// get(train, {0.231703, 0.774627, 0.371737, 0, 0, 0, 0, 0,}, 13);
}




// TEST(TrainerTest, FindCloserSimple)
// {
// 	Trainer<8> train;
// 	0 (new): 0.520325 1 1 1 1 1 0 0 -> 0
// 	1 (new): 0.520325 0.520325 0.520325 0 0 0.520325 0.520325 0.520325 -> 0
// 	2 (new): 0 0.520325 0 1 1 1 0.520325 0.520325 -> 0
// 	3 (new): 1 1 1 1 0.520325 0 0.520325 1 -> 0.520325
// 	4 (new): 0.520325 1 1 1 0 0 0 0.520325 -> 0.520325
// 	5 (new): 1 1 0.520325 0.520325 0 0.520325 0.520325 1 -> 0.520325
// 	6 (new): 1 1 0.520325 0 0.520325 1 1 1 -> 0.520325
// 	7 (new): 0.520325 0.520325 0 0 0.520325 1 1 1 -> 0.520325
// 	8 (new): 0.520325 0 0 1 1 1 1 1 -> 0.520325
// 	9 (new): 0 0 0 0 1 0.520325 1 0 -> 1
// 	10 (new): 1 0 0 0 1 0.520325 0.520325 1 -> 1
// 	11 (new): 1 0 0 0 1 0 0.520325 0.520325 -> 1
// 	12 (new): 1 0 0 0 1 1 0 0.520325 -> 1
// 	13 (new): 1 0 0 0 0 0 1 0 -> 1
// 	14 (new): 0 0 1 1 0.520325 0.520325 1 0 -> 1
// 	15 (new): 0 1 1 0 0 0 1 0 -> 1
// 	16 (new): 0 0 1 0.520325 0.520325 0.520325 1 0 -> 1
// 	17 (new): 0 0 1 0 0 0 1 0.520325 -> 1
// 	18 (new): 0 0 1 0.520325 0.520325 1 1 0 -> 1
// 	19 (new): 0.520325 0 1 0 0 0 1 1 -> 1
// 	20 (new): 0 0 1 0.520325 1 0 0 0 -> 1
// 	21 (new): 1 1 0.520325 0.520325 1 0 0 0 -> 1
// 	22 (new): 1 0.520325 0.520325 0.520325 1 0 0 0 -> 1
// 	23 (new): 1 0.520325 0.520325 1 1 0 0 0 -> 1
// 	24 (new): 1 0.520325 1 0 0 0 0 0 -> 1
// 	Generating
// 	0.0480942 0.761018 0.139636 0.768994 0.705262 0.871071 0.405527 0.0999346 id> 2(0->0.697034)
// 	0.690132 0.139636 0.768994 0.571553 0.719276 0.917196 0.871071 0.405527 id> 18(1->0.70821)
// 	0.705262 0.768994 0.571553 0.770641 0.0144336 0.087315 0.917196 0.871071 id> 19(1->0.722083)
// 	0.0999346 0.0480942 0.690132 0.705262 0.871071 0.271182 0.11007 0.25657 id> 20(1->0.411472)
// 	0.405527 0.690132 0.705262 0.719276 0.917196 0.785275 0.271182 0.11007 id> 22(1->0.87236)
// 	0.871071 0.705262 0.719276 0.0144336 0.087315 0.710842 0.785275 0.271182 id> 1(0->0.926368)
// 	0.25657 0.0999346 0.405527 0.871071 0.271182 0.422712 0.577949 0.857636 id> 14(1->0.118969)
// 	0.11007 0.405527 0.871071 0.917196 0.785275 0.784359 0.422712 0.577949 id> 2(0->0.273894)
// 	0.271182 0.871071 0.917196 0.087315 0.710842 0.148793 0.784359 0.422712 id> 17(1->0.787422)
// }